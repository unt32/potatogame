import socket
import threading
import random
import time

class MathGameServer:
    def __init__(self, host='localhost', port=5555):
        self.host = host
        self.port = port
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.clients = []
        self.nicknames = []
        self.game_active = False
        self.current_player = None
        
    def generate_math_problem(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É"""
        operations = ['+', '-', '*']
        a = random.randint(1, 10)
        b = random.randint(1, 10)
        op = random.choice(operations)
        
        if op == '+':
            answer = a + b
        elif op == '-':
            # –ò–∑–±–µ–≥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            a, b = max(a, b), min(a, b)
            answer = a - b
        else:  # '*'
            a = random.randint(1, 5)
            b = random.randint(1, 5)
            answer = a * b
            
        problem = f"{a} {op} {b}"
        return problem, answer
    
    def broadcast(self, message, exclude_client=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        for client in self.clients:
            if client != exclude_client:
                try:
                    client.send(message.encode('utf-8'))
                except:
                    self.remove_client(client)
    
    def remove_client(self, client):
        """–£–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∏–≥—Ä—ã"""
        if client in self.clients:
            index = self.clients.index(client)
            nickname = self.nicknames[index]
            
            self.broadcast(f"–ò–≥—Ä–æ–∫ {nickname} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã!")
            self.clients.remove(client)
            self.nicknames.remove(nickname)
            
            self.current_player.send(f"EXIT".encode('utf-8'))
            client.close()

            print(f"–ò–≥—Ä–æ–∫ {nickname} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
    
    def handle_client(self, client):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        while True:
            try:
                message = client.recv(1024).decode('utf-8')
                
                if message.startswith('NICKNAME:'):
                    nickname = message.split(':')[1]
                    self.nicknames.append(nickname)
                    self.clients.append(client)
                    print(f"–ò–≥—Ä–æ–∫ {nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ")
                    self.broadcast(f"–ò–≥—Ä–æ–∫ {nickname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
                    
                    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
                    if len(self.clients) >= 2 and not self.game_active:
                        self.start_game()
                
                elif message.startswith('ANSWER:'):
                    if client == self.current_player:
                        answer = int(message.split(':')[1])
                        nickname = self.nicknames[self.clients.index(client)]
                        
                        if answer == self.current_answer:
                            self.broadcast(f"‚úì –ò–≥—Ä–æ–∫ {nickname} –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª –∑–∞–¥–∞—á—É!")
                            time.sleep(1)
                            self.next_round()
                        else:
                            self.broadcast(f"‚úó –ò–≥—Ä–æ–∫ {nickname} –æ—à–∏–±—Å—è! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.current_answer}")
                            time.sleep(1)
                            self.remove_client(client)
                            
                            if len(self.clients) > 1:
                                self.next_round()
                            else:
                                self.end_game()
                
            except:
                self.remove_client(client)
                break
    
    def next_round(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥"""
        if len(self.clients) > 1:
            self.current_player = random.choice(self.clients)
            problem, answer = self.generate_math_problem()
            self.current_answer = answer
            
            player_nickname = self.nicknames[self.clients.index(self.current_player)]
            self.broadcast(f"\nüéØ –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫: {player_nickname}")
            time.sleep(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
            self.current_player.send(f"PROBLEM:{problem}".encode('utf-8'))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            for client in self.clients:
                if client != self.current_player:
                    client.send(f"WAIT:–ò–≥—Ä–æ–∫ {player_nickname} —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É: {problem}".encode('utf-8'))
        
        else:
            self.end_game()
    
    def start_game(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É"""
        self.game_active = True
        self.broadcast("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!")
        time.sleep(2)
        self.broadcast(f"–ò–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ: {len(self.clients)}")
        time.sleep(1)
        self.next_round()
    
    def end_game(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
        if self.clients:
            winner = self.nicknames[0]
            self.broadcast(f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
            self.game_active = False
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        self.server_socket.bind((self.host, self.port))
        self.server_socket.listen()
        print(f"üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
        
        while True:
            client, address = self.server_socket.accept()
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {address[0]}:{address[1]}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
            client.send("NICK".encode('utf-8'))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
            thread = threading.Thread(target=self.handle_client, args=(client,))
            thread.daemon = True
            thread.start()

if __name__ == "__main__":
    server = MathGameServer()
    server.start_server()
